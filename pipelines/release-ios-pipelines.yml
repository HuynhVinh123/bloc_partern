name: $(Date:yy)$(DayOfYear)$(Rev:rr)
trigger:
  - dev
  - master
  - refs/tags/*

variables:
  FlutterChannel: 'stable'
  FlutterVersion: 'latest'

  ProjectSlug: 'nam.nvnnb-hotmail.com/tpos_mobile>'
  ProjectDirectory: '$(Build.SourcesDirectory)/tpos_mobile'

  BuildNumber: '$(Build.BuildNumber)'
  AndroidBuildName: ''
  AndroidBuildNumber: ''
  BuildMessage: '$(Build.SourceVersionMessage)'
  BuildDirectory: '$(ProjectDirectory)\build\app\outputs\apk\release\app-release.apk'
  BuildMessageFileName: '$(Build.SourcesDirectory)\temp\build_message$(BuildNumber).txt'
  ANDROID_SDK_ROOT: 'D:\namnv\Android\Sdk'
  CurrentDate: $(Get-Date -Format yy.MM.dd.HHmm)
  FirebaseCliPath: 'D:\agent\firebase-tools-instant-win.exe'
  FirebaseAppId: '1:852209026200:android:94d53e46d7dd6821'
  FirebaseTesterGroup: 'tmt-tester'
  


stages: 
  - stage: Build_Stage
    displayName: "Build"
    jobs: 
      - job: Build_Android
        displayName: 'Build Android'
        variables:
          platform: 'android'
        pool:
          name: 'namnv_agent'
          demands:
            - Agent.OS -equals Windows_NT
        steps:
          - checkout: self
            persistCredentials: true
          - task: FlutterInstall@0
            displayName: 'Install Flutter SDK'
            inputs:
              channel: 'stable'
              version: 'latest'
          - task: PowerShell@2
            displayName: Setup window variable environment
            inputs:
              targetType: 'inline'
              script: |
                  echo "##vso[task.setvariable variable=ANDROID_SDK_ROOT]C:\Users\tmt\AppData\Local\Android\Sdk"
                  echo "##vso[task.setvariable variable=ANDROID_HOME]C:\Users\tmt\AppData\Local\Android\Sdk"
                  echo "##vso[task.setvariable variable=JAVA_HOME]C:\Program Files\Java\jdk-11.0.9"
                  Write-Host "##vso[task.prependpath]$(FlutterToolPath)"
                  Write-Host "##vso[task.prependpath]$(FlutterToolPath)/cache/dart-sdk/bin"
                  Write-Host "##vso[task.prependpath]C:\Users\tmt\AppData\Roaming\npm"

          - task: PowerShell@2
            displayName: Config Git for authentication to flutter package dependency
            inputs:
              targetType: 'inline'
              script: |
                git config --global user.email "namnv@tmtsofts.com"
                git config --global user.name "Nguyen Van Nam"
                git config --global http.https://tfs.tpos.dev/TMT01Collection/TMT%20Flutter%20Gallery/_git/tmt_flutter_utils.extraheader "AUTHORIZATION: Basic $(readPathBase64)"
                git config --global http.https://tfs.tpos.dev/TMT01Collection/TMT%20Flutter%20Gallery/_git/nam_esc_pos_printer.extraheader "AUTHORIZATION: Basic $(readPathBase64)"


          - task: PowerShell@2
            displayName: Run flutter pub get and generate intl10 from tpos_mobile_localization repository.
            inputs:
                targetType: 'inline'
                script: |
                  $(FlutterToolPath)/flutter.bat pub get
                  $(FlutterToolPath)/flutter.bat pub run intl_utils:generate
                workingDirectory: '$(Build.SourcesDirectory)/tpos_mobile_localization'

          - task: ExtractVersionFromTag@1
            inputs:
              projectFolderPath: '$(Build.SourcesDirectory)'
          - task: PowerShell@2
            displayName: Update Variable for android build
            condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/')
            inputs:
                targetType: 'inline'
                script: |
                  $BuildName = '$(Build.SourceBranchName).$(BuildNumber)'
                  Write-Host "##vso[task.setvariable variable=AndroidBuildName;]$BuildName"
          - task: PowerShell@2
            displayName: Update Variable for android build
            condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
            inputs:
                targetType: 'inline'
                script: |
                  $buildName = "$(Build.SourceBranch)".SubString(11)
                  Write-Host "##vso[task.setvariable variable=AndroidBuildName;]$BuildName"
          - task: PowerShell@2
            displayName: Update Variable for android build
            condition: startsWith(variables['Build.SourceBranch'], 'refs/pull/')
            inputs:
                targetType: 'inline'
                script: |
                  $buildName = "$(Build.SourceBranch)".SubString(10,4)
                  $buildName = $("PR." + $buildName)
                  Write-Host "##vso[task.setvariable variable=AndroidBuildName;]$BuildName"
          
          - task: PowerShell@2
            displayName: Build Apk For test
            condition: | 
              or
              (
                startsWith(variables['Build.SourceBranch'], 'refs/heads/'), 
                startsWith(variables['Build.SourceBranch'], 'refs/pull/')
              )
            inputs:
              targetType: 'inline'
              script: |
                Write-Output 'Goto project directory'
                Set-Location -Path $(ProjectDirectory)
                Write-Output 'Run flutter pub get'
                $(FlutterToolPath)/flutter.bat clean
                $(FlutterToolPath)/flutter.bat pub get
                $(FlutterToolPath)/flutter.bat pub upgrade
                Write-Output $BuildNumber
                Write-Output $AndroidBuildName
                $(FlutterToolPath)/flutter.bat build apk --build-number $(BuildNumber) --build-name $(AndroidBuildName)

          - task: PowerShell@2
            displayName: Build Apk for release
            condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
            inputs:
              targetType: 'inline'
              script: |
                Write-Output 'Goto project directory'
                Set-Location -Path $(ProjectDirectory)
                Write-Output 'Run flutter pub get'
                $(FlutterToolPath)/flutter.bat pub get
                $(FlutterToolPath)/flutter.bat pub upgrade
                $(FlutterToolPath)/flutter.bat build apk --release --split-per-abi

      - job: Build_Ios
        displayName: 'Build Ios'
        pool:
          name: 'namnv_agent'
          demands:
            - Agent.OS -equals Darwin
        variables:
          IosBuildName: '1.18.0'
        steps:
          - checkout: self
            persistCredentials: true
            displayName: 'Checkout source code'
          - task: FlutterInstall@0
            inputs:
              channel: 'stable'
              version: 'latest'
          - task: CmdLine@2
            displayName: Run flutter pub get
            inputs:
              script: |
                $(FlutterToolPath)/flutter pub get
              workingDirectory: '$(Build.SourcesDirectory)/tpos_mobile_localization'
          
          - task: CmdLine@2
            displayName: Run flutter pub run intl_utils:generate
            inputs:
              script: |
                $(FlutterToolPath)/flutter pub run intl_utils:generate
              workingDirectory: '$(Build.SourcesDirectory)/tpos_mobile_localization'
        
          - task: FlutterBuild@0
            inputs:
              target: 'ios'
              projectDirectory: '$(ProjectDirectory)'
              buildName: '1.8.0'
              iosTargetPlatform: 'simulator'

  - stage: UnitTestStage
    displayName: 'Run Unit test'
    dependsOn: Build_Stage
    condition: succeeded()
    jobs:
      - job: AndroidUnitTest
      - job: IosUnitTest
  - stage: Upload_Android
    displayName: 'Upload android'
    dependsOn: UnitTestStage
    condition: succeeded()
    jobs:
      - job: UploadApkForTest
        displayName: 'Upload APK for tester can download'
        pool:
          name: 'namnv_agent'
          demands:
            - Agent.OS -equals Windows_NT
        steps:
          - task: CmdLine@2
            displayName: Install Firebase tool
            inputs:
              script: 'npm install -g firebase-tools'


          - task: PowerShell@2
            displayName: Update npm PATH on Window
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "##vso[task.prependpath]C:\Windows\ServiceProfiles\NetworkService\AppData\Roaming\npm"

          - task: CopyFiles@2
            inputs:
              contents: '**/*.apk'
              targetFolder: '$(build.artifactStagingDirectory)'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

          - task: PowerShell@2
            displayName: 'Write build message to file'
            inputs:
              targetType: 'inline'
              script: |
                New-Item $(BuildMessageFileName) -f -value '$(BuildMessage)'
                Write-Host "Đã xong..."


          - task: PowerShell@2
            displayName: Upload apk to firebase distribution
            condition: | 
                startsWith(variables['Build.SourceBranch'], 'refs/heads/')
            
            inputs:
                targetType: 'inline'
                script: |
                    firebase appdistribution:distribute $(BuildDirectory) --app $(FirebaseAppId) --token "$(firebaseToken)" --release-notes-file "$(BuildMessageFileName)" --groups "dev_tester" --debug

          - task: PowerShell@2
            displayName: Upload apk to firebase distribution
            condition: | 
                startsWith(variables['Build.SourceBranch'], 'refs/pull/')
            inputs:
                targetType: 'inline'
                script: |
                    firebase appdistribution:distribute $(BuildDirectory) --app $(FirebaseAppId) --token "$(firebaseToken)" --release-notes-file "$(BuildMessageFileName)" --groups "pull_tester" --debug

          - task: PowerShell@2
            displayName: Upload to test apk distribution
            condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
            inputs:
                targetType: 'inline'
                script: |
                    firebase appdistribution:distribute $(ProjectDirectory)\build\app\outputs\apk\release\app-arm64-v8a-release.apk --app $(FirebaseAppId) --token "$(firebaseToken)" --release-notes "$(BuildMessageFileName)" --groups "$(FirebaseTesterGroup)" --debug
                    firebase appdistribution:distribute $(ProjectDirectory)\build\app\outputs\apk\release\app-armeabi-v7a-release.apk --app $(FirebaseAppId) --token "$(firebaseToken)" --release-notes "$(BuildMessageFileName)" --groups "$(FirebaseTesterGroup)" --debug
                    firebase appdistribution:distribute $(ProjectDirectory)\build\app\outputs\apk\release\app-x86_64-release.apk --app $(FirebaseAppId) --token "$(firebaseToken)" --release-notes "$(BuildMessageFileName)" --groups "$(FirebaseTesterGroup)" --debug
          - task: ExtractVersionFromTag@1
            displayName: 'Extract version from git tag'
            inputs:
              projectFolderPath: '$(Build.SourcesDirectory)'
  - stage: Upload_Ios
    displayName: 'Upload Ipa'
    dependsOn: UnitTestStage
    condition: succeeded()
    jobs:
      - job: UploadIpaTest

  - stage: Document_State
    displayName: 'Documentation'
    dependsOn: 
      - Upload_Android
      - Upload_Ios
    condition: succeeded()
    jobs:
      - job: UpdateReleaseNotes
        pool:
          name: 'namnv_agent'
          demands:
            - Agent.OS -equals Windows_NT
        steps:
        - task: GenerateReleaseNotes@3
          inputs:
            outputfile: '$(Build.ArtifactStagingDirectory)\ReleaseNotes.md'
            templateLocation: 'InLine'
            inlinetemplate: |
              # Release notes for build $defname
              **Build Number**  : $($build.buildnumber)
              **Build started** : $("{0:dd/MM/yy HH:mm:ss}" -f [datetime]$build.startTime)
              **Source Branch** : $($build.sourceBranch)
              
              ###Associated work items
              @@WILOOP@@
              * **$($widetail.fields.'System.WorkItemType') $($widetail.id)** [Assigned by: $($widetail.fields.'System.AssignedTo')]     $($widetail.fields.'System.Title')
              @@WILOOP@@
              
              ### Associated change sets/commits
              @@CSLOOP@@
              * **ID $($csdetail.changesetid)$($csdetail.commitid)** $($csdetail.comment)
              @@CSLOOP@@
              
              ----------
              
              @@BUILDLOOP@@
            usedefaultcreds: false
            generateForOnlyPrimary: false
            generateForOnlyTriggerArtifact: false
            appendToFile: false
            showParents: false
        
        - task: WikiFolderUpdaterTask@1
          inputs:
            repo: 'tfs.tpos.dev/TMT01Collection/TPOSAPP/_git/TPOSAPP.wiki'
            targetFolder: '/TPOSAPP-MOBILE-TEAM-WIKI/Release-notes'
            replaceFile: false
            sourceFolder: '$(Build.ArtifactStagingDirectory)'
            Filter: '**/*.md'
            message: 'Update Release notes Wiki'
            gitname: 'namnv'
            gitemail: 'namnv@tmtsofts.com'
            useAgentToken: true
            localpath: '$(System.DefaultWorkingDirectory)\repo'
            user: systmt\tfs_namnv
            password: $(TfsPAT)
            injectExtraHeader: true
            appendToFile: false
  - stage: Deploy_production  
    dependsOn: Document_State
    displayName: 'Deploy to production'
    jobs:
      - job: Publish_Google
      - job: Publish_Apple
